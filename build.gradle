apply plugin: 'java'

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    invoker
}

dependencies {
    // Every function needs this dependency to get the Functions Framework API.
    compileOnly 'com.google.cloud.functions:functions-framework-api:1.1.0'
    implementation platform('com.google.cloud:libraries-bom:26.42.0')

    implementation 'com.google.cloud:google-cloud-storage'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.2.3'
    implementation 'org.glassfish:jakarta.json:2.0.1'
    implementation 'jakarta.json:jakarta.json-api:2.0.2'

    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20220927-2.0.0'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.3.0'
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
    // To run function locally using Functions Framework's local invoker
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.3.1'
    // email
    implementation 'com.sendgrid:sendgrid-java:4.10.1'
    // These dependencies are only used by the tests.
    testImplementation 'com.google.cloud.functions:functions-framework-api:1.1.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.truth:truth:1.2.0'
    testImplementation 'org.mockito:mockito-core:5.9.0'


}

// Register a "runFunction" task to run the function locally
tasks.register("runFunction", JavaExec) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
    args(
            '--target', project.findProperty('run.functionTarget') ?: '',
            '--port', project.findProperty('run.port') ?: 8080
    )
    doFirst {
        args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
    }
}
